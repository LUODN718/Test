`timescale 1ns / 1ns

module must_pic(
    input wire vga_clk,           // VGA working clock, 25MHz
    input wire sys_rst_n,         // Reset signal. Low level is effective
    input wire [9:0] pix_x,       // X coordinate of current pixel
    input wire [9:0] pix_y,       // Y coordinate of current pixel
    output reg [15:0] pix_data    // Color information
);

    // Parameter define
    parameter H_VALID = 10'd640;  // Maximum x value
    parameter V_VALID = 10'd480;  // Maximum y value
    parameter BLACK = 16'h0000;   // Background color
    parameter WHITE = 16'hFFFF;   // Text color

    // Character position and size
    parameter MUST_X_START = 10'd240;
    parameter MUST_Y_START = 10'd200;
    parameter CHAR_WIDTH = 10'd16;
    parameter CHAR_HEIGHT = 10'd16;

    // Font ROM (4 characters: M, U, S, T)
    reg [7:0] font_rom [0:63];    // 4 x 16 rows
    integer i;

    initial begin
        for (i = 0; i < 64; i = i + 1) 
            font_rom[i] = 8'b0;

        // 'M'
        font_rom[0 * 16 + 0] = 8'b11111110;
        font_rom[0 * 16 + 1] = 8'b11010110;
        font_rom[0 * 16 + 2] = 8'b11010110;
        font_rom[0 * 16 + 3] = 8'b11010110;
        font_rom[0 * 16 + 4] = 8'b11010110;
        font_rom[0 * 16 + 5] = 8'b11010110;
        font_rom[0 * 16 + 6] = 8'b11010110;
        font_rom[0 * 16 + 7] = 8'b11010110;
        font_rom[0 * 16 + 8] = 8'b11010110;
        font_rom[0 * 16 + 9] = 8'b11010110;
        font_rom[0 * 16 + 10] = 8'b11010110;
        font_rom[0 * 16 + 11] = 8'b11010110;
        font_rom[0 * 16 + 12] = 8'b11010110;
        font_rom[0 * 16 + 13] = 8'b11000110;
        font_rom[0 * 16 + 14] = 8'b11000110;
        font_rom[0 * 16 + 15] = 8'b00000000;

        // 'U'
        font_rom[1 * 16 + 0] = 8'b11000110;
        font_rom[1 * 16 + 1] = 8'b11000110;
        font_rom[1 * 16 + 2] = 8'b11000110;
        font_rom[1 * 16 + 3] = 8'b11000110;
        font_rom[1 * 16 + 4] = 8'b11000110;
        font_rom[1 * 16 + 5] = 8'b11000110;
        font_rom[1 * 16 + 6] = 8'b11000110;
        font_rom[1 * 16 + 7] = 8'b11000110;
        font_rom[1 * 16 + 8] = 8'b11000110;
        font_rom[1 * 16 + 9] = 8'b11000110;
        font_rom[1 * 16 + 10] = 8'b11000110;
        font_rom[1 * 16 + 11] = 8'b11000110;
        font_rom[1 * 16 + 12] = 8'b11000110;
        font_rom[1 * 16 + 13] = 8'b11000110;
        font_rom[1 * 16 + 14] = 8'b11111110;
        font_rom[1 * 16 + 15] = 8'b01111100;

        // 'S'
        font_rom[2 * 16 + 0] = 8'b01111100;
        font_rom[2 * 16 + 1] = 8'b11000110;
        font_rom[2 * 16 + 2] = 8'b11000000;
        font_rom[2 * 16 + 3] = 8'b11000000;
        font_rom[2 * 16 + 4] = 8'b11000000;
        font_rom[2 * 16 + 5] = 8'b01110000;
        font_rom[2 * 16 + 6] = 8'b00011100;
        font_rom[2 * 16 + 7] = 8'b00000110;
        font_rom[2 * 16 + 8] = 8'b00000110;
        font_rom[2 * 16 + 9] = 8'b00000110;
        font_rom[2 * 16 + 10] = 8'b00000110;
        font_rom[2 * 16 + 11] = 8'b11000110;
        font_rom[2 * 16 + 12] = 8'b11000110;
        font_rom[2 * 16 + 13] = 8'b11000110;
        font_rom[2 * 16 + 14] = 8'b11000110;
        font_rom[2 * 16 + 15] = 8'b01111100;

        // 'T'
        font_rom[3 * 16 + 0] = 8'b11111111;
        font_rom[3 * 16 + 1] = 8'b00011000;
        font_rom[3 * 16 + 2] = 8'b00011000;
        font_rom[3 * 16 + 3] = 8'b00011000;
        font_rom[3 * 16 + 4] = 8'b00011000;
        font_rom[3 * 16 + 5] = 8'b00011000;
        font_rom[3 * 16 + 6] = 8'b00011000;
        font_rom[3 * 16 + 7] = 8'b00011000;
        font_rom[3 * 16 + 8] = 8'b00011000;
        font_rom[3 * 16 + 9] = 8'b00011000;
        font_rom[3 * 16 + 10] = 8'b00011000;
        font_rom[3 * 16 + 11] = 8'b00011000;
        font_rom[3 * 16 + 12] = 8'b00011000;
        font_rom[3 * 16 + 13] = 8'b00011000;
        font_rom[3 * 16 + 14] = 8'b00011000;
        font_rom[3 * 16 + 15] = 8'b00011000;
    end

    // Main code
    always @(posedge vga_clk or negedge sys_rst_n) begin
        if (!sys_rst_n)
            pix_data <= 16'd0;
        else begin
            if ((pix_x >= MUST_X_START) && (pix_x < MUST_X_START + 4 * CHAR_WIDTH) && 
                (pix_y >= MUST_Y_START) && (pix_y < MUST_Y_START + CHAR_HEIGHT)) begin
                // Calculate character index and row
                integer char_idx = (pix_x - MUST_X_START) / CHAR_WIDTH;
                integer row = pix_y - MUST_Y_START;
                if (font_rom[char_idx * 16 + row][15 - (pix_x - MUST_X_START) % CHAR_WIDTH])
                    pix_data <= WHITE;
                else
                    pix_data <= BLACK;
            end else
                pix_data <= BLACK;  // Background
        end
    end

endmodule
